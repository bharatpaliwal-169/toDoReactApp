{"version":3,"sources":["components/basic/Clock.js","components/features/Loginn.js","components/basic/Header.js","components/basic/MainBody.js","components/features/Like.js","components/basic/Footer.js","components/ToDoItem.js","components/ToDoMain.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Loginn","islogged","handel_logClick","bind","prevState","buttonText","displayText","className","onClick","Header","MainBody","username","Greeting","Welcome","timeOfDay","hours","getHours","Like","count","handelClick","Footer","ToDoItem","createTask","item","delete","key","text","listItem","entries","map","React","ToDoMain","items","addItem","deleteItem","e","_inputElement","value","newItem","now","concat","window","alert","console","log","preventDefault","filteredItems","filter","onSubmit","ref","a","type","placeholder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b44bbb7.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass Clock extends Component{\n  constructor(props){\n    super(props);\n    this.state = {date: new Date()};\n  }\n  //adding lifecycle to the clock\n  //lifecycle methods .....\n  //seting up timer\n  componentDidMount(){\n    this.timerID = setInterval(\n      () => this.tick(),1000\n    );\n  }\n  componentWillUnmount(){\n    clearInterval(this.timerID);\n  }\n\n  tick(){\n    this.setState({date: new Date()});\n  }\n\n\n  render(){\n    return(\n      <div>\n        <h4>TIME : {this.state.date.toLocaleTimeString()}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React ,{Component} from 'react';\n\nclass Loginn extends Component{\n  constructor(){\n    super();\n    this.state = {\n      islogged: true\n    };\n\n    this.handel_logClick = this.handel_logClick.bind(this);\n  }\n\n  handel_logClick(){\n    this.setState(prevState =>{\n      return{\n        islogged : !prevState.islogged\n      };\n    })\n  }\n\n  render(){\n    let buttonText = this.state.islogged ? \"LOG OUT\" : \"LOGIN\";\n    let displayText = this.state.islogged ? \"Logged in\" : \"Logged Out\"\n    return(\n      <div>\n        <button className='login-btn' onClick={this.handel_logClick}>{buttonText}</button>\n        <p> Current Status: {displayText} </p>\n      </div>\n    );\n  }\n}\n\n\nexport default Loginn;\n","import React,{Component} from 'react';\nimport Clock from './Clock';\nimport './style.css';\nimport Loginn from '../features/Loginn';\n\nclass Header extends Component {\n  render(){\n    return(\n      <header>\n        <div >\n          <h1 className= 'head'> TODO App</h1>\n        </div>\n        <div className='timer'>\n          <div className='loginn'>\n            <Loginn />\n          </div>\n          <Clock />\n        </div>\n\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React,{Component} from 'react';\nimport './style.css';\n\nclass MainBody extends Component{\n  render() {\n    return(\n      <div className='main-body'>\n        <Welcome username='User' />\n        <Greeting />\n\n        <h3>Instructions:</h3>\n        <ul>\n          <li> This is the simple TODO app you can simply add your task in the input</li>\n          <li>Once you are done with your task just click over it to delete</li>\n          <li>You can add/remove any number of tasks. </li>\n          <li>Your feedback is really valuable</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nclass Welcome extends Component{\n  render(){\n    return(\n      <h3 className='body-text'>Welcome <strong className='user'> {this.props.username} </strong> </h3>\n    );\n  }\n}\n\nfunction Greeting(props){\n  const date = new Date();\n  const hours = date.getHours();\n  let timeOfDay;\n\n  if(hours < 12 && hours >= 2){\n    timeOfDay = 'Good Morning!';\n  }\n  else if (hours >= 12 && hours <16) {\n    timeOfDay = 'Good Afternoon!';\n  }\n  else if(hours>= 16 && hours < 22){\n    timeOfDay = 'Good Evening!';\n  }\n  else{\n    timeOfDay = 'Good Night!'\n  }\n\n  return(\n    <p className='body-text' >{timeOfDay}</p>\n  );\n}\n\n\n\nexport default MainBody;\n","import React , {Component} from 'react';\n\n\n\nclass Like extends Component{\n  constructor(){\n    super();\n    //inital state value\n\n    this.state = {\n      count:0\n    };\n    //Important!!!!\n\n    //binding the handelClick function\n    this.handelClick = this.handelClick.bind(this);\n\n  }\n\n\n  handelClick(){\n\n    //updating the state......\n    this.setState(prevState => {      //passing previous state as variable\n//note that here return have {} instead of ()......\n      return{\n        count : prevState.count + 1\n      };\n    }) //updating state\n  } //end handel click\n\n  render(){\n    return(\n      <div className='like-area'>\n        <button onClick={this.handelClick} className='button'>\n          Like :\n          <span> {this.state.count} </span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Like;\n","import React,{Component} from 'react';\nimport './style.css';\nimport Like from '../features/Like';\n\nclass Footer extends Component{\n  render(){\n    return(\n      <footer className='footer-style'>\n        <div className='flex-container'>\n          <div>\n            <p className='foot-text '> Created & Developed by: Bharat Paliwal </p>\n          </div>\n          <div>\n            <Like />\n          </div>\n        \n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport './todostyle.css';\n//\n//\n// function ToDoItem(props){\n// //adding styles after task completion...\n//\n//\n//   return(\n//     <div className='todo-item'>\n//       <input type='checkbox'\n//              Checked ={props.item.completed}\n//              onChange={() => props.handleChange(props.item.id)} />\n//\n//       <p> {props.item.text} </p>\n//     </div>\n//   );\n// }\n//\n\nclass ToDoItem extends React.Component{\n\n  constructor(props){\n    super(props);\n\n    this.createTask = this.createTask.bind(this);\n  }\n\n  createTask(item){\n    return (\n      <li\n        onClick={()=>this.delete(item.key)}\n        key={item.key}> {item.text}\n      </li>\n    );\n  }\n\n  delete(key){\n    this.props.delete(key);\n\n    \n  }\n  render(){\n    //copy of the items from ToDoMain\n    const todoEntries = this.props.entries;   //array\n    const listItem = todoEntries.map(this.createTask);\n\n    return(\n      <div className='todo-item'>\n          <ul className='theList'>{listItem}</ul>\n      </div>\n\n    );\n  }\n}\n\n\nexport default ToDoItem;\n","import React, {Component} from 'react';\nimport ToDoItem from './ToDoItem';\nimport './todostyle.css';\n// import todoData from './dataFolder/todoData';\n//\n//\n// class ToDoMain extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       todos: todoData\n//     };\n//\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   handleChange(id){\n//     this.setState(prevState => {\n//       const updatedTodos = prevState.todos.map(todo =>  {\n//         if(todo.id === id){\n//           todo.completed = !todo.completed\n//         }\n//         return todo;\n//\n//       })\n//       return{\n//         todos: updatedTodos\n//       }\n//     })\n//\n//   }\n//\n//   render(){\n//     const todoitem = this.state.todos.map( item => <ToDoItem key ={item.id} item={item}\n//       handleChange = {this.handleChange} />);\n//     return (\n//       <div className='todo-list'>\n//         {todoitem}\n//       </div>\n//     );\n//   }\n// }\n\n\nclass ToDoMain extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      items : []\n    };\n\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  addItem(e){\n    //if not a empty submit then\n    if (this._inputElement.value !== \"\") {\n      //create a new array object\n      var newItem = {\n        text: this._inputElement.value,\n        key: Date.now()\n      };\n\n      //setting up the state to update the task list\n      this.setState((prevState)=>{\n        return{\n          items : prevState.items.concat(newItem)\n        };\n      });\n\n      //empty the inputElement again for nxt values\n      this._inputElement.value = \"\";\n    }\n\n    else {\n      window.alert(\"Empty input field; Please enter some text..\");\n    }\n\n    console.log(this.state.items); //checker\n     // we are clearing the value of our input element\n      //to make room for the next todo item.\n    e.preventDefault();\n\n\n  }    //synthetic event (e)\n\n  deleteItem(key) {\n  var filteredItems = this.state.items.filter(function (item) {\n    return (item.key !== key);\n  });\n\n  this.setState({\n    items: filteredItems\n  });\n}\n\n\n  render(){\n  return(\n    <div className='todo-list'>\n    <h2 className='todo-heading'>TASKS</h2>\n      <form onSubmit={this.addItem}>\n\n          <input ref={(a) => this._inputElement = a }\n                 type='text' className='input'\n                 placeholder='Enter task here' />\n          <button type='submit' className='add'>ADD</button>\n\n      </form>\n      <ToDoItem entries={this.state.items}\n                delete={this.deleteItem}/>\n    </div>\n\n\n  );\n  }\n}\n\n\nexport default ToDoMain;\n","import React,{Component} from 'react';\nimport Header from './components/basic/Header';\nimport MainBody from './components/basic/MainBody';\nimport Footer from './components/basic/Footer';\nimport ToDoMain from './components/ToDoMain';\n// import Comments from './components/Comments';\n// import CommentMap from './components/CommentMap';\n\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <Header />\n        <MainBody />\n        <ToDoMain />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}